/*
 * Copyright (c) 2023 Proton AG
 * This file is part of Proton AG and ProtonCore.
 *
 * ProtonCore is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ProtonCore is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProtonCore.  If not, see <https://www.gnu.org/licenses/>.
 */

package me.proton.core.crypto.common.srp

/**
 * SRP Proofs crypto interface for authentication process.
 */
interface SrpCrypto {

    suspend fun generateSrpProofs(
        username: String,
        password: ByteArray,
        version: Long,
        salt: String,
        modulus: String,
        serverEphemeral: String
    ): SrpProofs

    suspend fun calculatePasswordVerifier(
        username: String,
        password: ByteArray,
        modulusId: String,
        modulus: String
    ): Auth
}

/**
 * Proofs needed to succeed the SRP authentication protocol
 * @property clientEphemeral ephemeral value generated by the client, base64 encoded
 * @property clientProof proof generated by the client, base64 encoded
 * @property expectedServerProof proof expected to be returned by the server, base64 encoded
 */
data class SrpProofs(
    val clientEphemeral: String,
    val clientProof: String,
    val expectedServerProof: String
)
