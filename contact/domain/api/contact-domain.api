public final class me/proton/core/contact/domain/VCardCryptoKt {
	public static final fun decryptContactCard (Lme/proton/core/key/domain/entity/keyholder/KeyHolderContext;Lme/proton/core/contact/domain/entity/ContactCard;)Lme/proton/core/contact/domain/entity/DecryptedVCard;
	public static final fun encryptAndSignContactCard (Lme/proton/core/key/domain/entity/keyholder/KeyHolderContext;Lezvcard/VCard;)Lme/proton/core/contact/domain/entity/ContactCard$Encrypted;
	public static final fun signContactCard (Lme/proton/core/key/domain/entity/keyholder/KeyHolderContext;Lezvcard/VCard;)Lme/proton/core/contact/domain/entity/ContactCard$Signed;
}

public final class me/proton/core/contact/domain/entity/Contact {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Lme/proton/core/contact/domain/entity/ContactId;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;)Lme/proton/core/contact/domain/entity/Contact;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/Contact;Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/Contact;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContactEmails ()Ljava/util/List;
	public final fun getId ()Lme/proton/core/contact/domain/entity/ContactId;
	public final fun getName ()Ljava/lang/String;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class me/proton/core/contact/domain/entity/ContactCard {
}

public final class me/proton/core/contact/domain/entity/ContactCard$ClearText : me/proton/core/contact/domain/entity/ContactCard {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactCard$ClearText;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactCard$ClearText;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactCard$ClearText;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactCard$Encrypted : me/proton/core/contact/domain/entity/ContactCard {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactCard$Encrypted;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactCard$Encrypted;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactCard$Encrypted;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Ljava/lang/String;
	public final fun getSignature ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactCard$Signed : me/proton/core/contact/domain/entity/ContactCard {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactCard$Signed;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactCard$Signed;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactCard$Signed;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Ljava/lang/String;
	public final fun getSignature ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactCardType : java/lang/Enum {
	public static final field ClearText Lme/proton/core/contact/domain/entity/ContactCardType;
	public static final field Companion Lme/proton/core/contact/domain/entity/ContactCardType$Companion;
	public static final field Encrypted Lme/proton/core/contact/domain/entity/ContactCardType;
	public static final field EncryptedAndSigned Lme/proton/core/contact/domain/entity/ContactCardType;
	public static final field Signed Lme/proton/core/contact/domain/entity/ContactCardType;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactCardType;
	public static fun values ()[Lme/proton/core/contact/domain/entity/ContactCardType;
}

public final class me/proton/core/contact/domain/entity/ContactCardType$Companion {
	public final fun enumOf (Ljava/lang/Integer;)Lme/proton/core/domain/type/IntEnum;
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/contact/domain/entity/ContactEmail {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactEmailId;Ljava/lang/String;Ljava/lang/String;IILme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;Ljava/lang/Boolean;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component10 ()Ljava/lang/Boolean;
	public final fun component2 ()Lme/proton/core/contact/domain/entity/ContactEmailId;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()I
	public final fun component6 ()I
	public final fun component7 ()Lme/proton/core/contact/domain/entity/ContactId;
	public final fun component8 ()Ljava/lang/String;
	public final fun component9 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactEmailId;Ljava/lang/String;Ljava/lang/String;IILme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;Ljava/lang/Boolean;)Lme/proton/core/contact/domain/entity/ContactEmail;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactEmail;Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactEmailId;Ljava/lang/String;Ljava/lang/String;IILme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;Ljava/util/List;Ljava/lang/Boolean;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactEmail;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCanonicalEmail ()Ljava/lang/String;
	public final fun getContactId ()Lme/proton/core/contact/domain/entity/ContactId;
	public final fun getDefaults ()I
	public final fun getEmail ()Ljava/lang/String;
	public final fun getId ()Lme/proton/core/contact/domain/entity/ContactEmailId;
	public final fun getLabelIds ()Ljava/util/List;
	public final fun getName ()Ljava/lang/String;
	public final fun getOrder ()I
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public final fun isProton ()Ljava/lang/Boolean;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactEmailId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactEmailId;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactEmailId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactEmailId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/contact/domain/entity/ContactId;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/ContactWithCards {
	public fun <init> (Lme/proton/core/contact/domain/entity/Contact;Ljava/util/List;)V
	public final fun component1 ()Lme/proton/core/contact/domain/entity/Contact;
	public final fun component2 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/contact/domain/entity/Contact;Ljava/util/List;)Lme/proton/core/contact/domain/entity/ContactWithCards;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/ContactWithCards;Lme/proton/core/contact/domain/entity/Contact;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/ContactWithCards;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContact ()Lme/proton/core/contact/domain/entity/Contact;
	public final fun getContactCards ()Ljava/util/List;
	public final fun getContactEmails ()Ljava/util/List;
	public final fun getId ()Lme/proton/core/contact/domain/entity/ContactId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/contact/domain/entity/DecryptedVCard {
	public fun <init> (Lezvcard/VCard;Lme/proton/core/crypto/common/pgp/VerificationStatus;)V
	public final fun component1 ()Lezvcard/VCard;
	public final fun component2 ()Lme/proton/core/crypto/common/pgp/VerificationStatus;
	public final fun copy (Lezvcard/VCard;Lme/proton/core/crypto/common/pgp/VerificationStatus;)Lme/proton/core/contact/domain/entity/DecryptedVCard;
	public static synthetic fun copy$default (Lme/proton/core/contact/domain/entity/DecryptedVCard;Lezvcard/VCard;Lme/proton/core/crypto/common/pgp/VerificationStatus;ILjava/lang/Object;)Lme/proton/core/contact/domain/entity/DecryptedVCard;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCard ()Lezvcard/VCard;
	public final fun getStatus ()Lme/proton/core/crypto/common/pgp/VerificationStatus;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class me/proton/core/contact/domain/repository/ContactLocalDataSource {
	public abstract fun deleteAllContactEmails (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteAllContacts (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteAllContacts (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteContactEmails ([Lme/proton/core/contact/domain/entity/ContactEmailId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteContacts ([Lme/proton/core/contact/domain/entity/ContactId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun mergeContacts ([Lme/proton/core/contact/domain/entity/Contact;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAllContacts (Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeContact (Lme/proton/core/contact/domain/entity/ContactId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun upsertContactEmails ([Lme/proton/core/contact/domain/entity/ContactEmail;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun upsertContactWithCards ([Lme/proton/core/contact/domain/entity/ContactWithCards;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun upsertContacts ([Lme/proton/core/contact/domain/entity/Contact;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/contact/domain/repository/ContactRemoteDataSource {
	public abstract fun createContacts (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteContacts (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAllContacts (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getContactWithCards (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateContact (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/contact/domain/repository/ContactRepository {
	public abstract fun createContact (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteContacts (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAllContactEmails (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAllContacts (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getContactWithCards (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAllContactEmails (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeAllContacts (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeContactWithCards (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun updateContact (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/contact/domain/repository/ContactRepository$DefaultImpls {
	public static synthetic fun getAllContactEmails$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getAllContacts$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getContactWithCards$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeAllContactEmails$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observeAllContacts$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observeContactWithCards$default (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
}

public final class me/proton/core/contact/domain/usecase/UpdateContactRemote {
	public fun <init> (Lme/proton/core/contact/domain/repository/ContactRepository;Lme/proton/core/eventmanager/domain/EventManagerProvider;)V
	public final fun invoke (Lme/proton/core/domain/entity/UserId;Lme/proton/core/contact/domain/entity/ContactId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

