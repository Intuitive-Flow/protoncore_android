public final class me/proton/core/notification/domain/ProtonNotificationManager {
	public fun <init> (Lme/proton/core/notification/domain/usecase/CancelNotificationView;Lme/proton/core/notification/domain/usecase/ConfigureNotificationChannel;Lme/proton/core/notification/domain/usecase/GetNotificationChannelId;Lme/proton/core/notification/domain/usecase/IsNotificationsEnabled;Lme/proton/core/notification/domain/repository/NotificationRepository;Lme/proton/core/push/domain/repository/PushRepository;Lme/proton/core/notification/domain/usecase/ReplaceNotificationViews;Lme/proton/core/util/kotlin/CoroutineScopeProvider;Lme/proton/core/notification/domain/usecase/ShowNotificationView;)V
	public final fun dismiss (Lme/proton/core/notification/domain/entity/Notification;)V
	public final fun dismiss (Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;)V
	public final fun onNotificationConsumed (Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/Job;
	public final fun replace (Ljava/util/List;Lme/proton/core/domain/entity/UserId;)V
	public final fun setupNotificationChannel ()V
	public final fun show (Lme/proton/core/notification/domain/entity/Notification;)V
}

public final class me/proton/core/notification/domain/entity/Notification {
	public fun <init> (Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;JLjava/lang/String;Lme/proton/core/notification/domain/entity/NotificationPayload;)V
	public final fun component1 ()Lme/proton/core/notification/domain/entity/NotificationId;
	public final fun component2 ()Lme/proton/core/domain/entity/UserId;
	public final fun component3 ()J
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Lme/proton/core/notification/domain/entity/NotificationPayload;
	public final fun copy (Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;JLjava/lang/String;Lme/proton/core/notification/domain/entity/NotificationPayload;)Lme/proton/core/notification/domain/entity/Notification;
	public static synthetic fun copy$default (Lme/proton/core/notification/domain/entity/Notification;Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;JLjava/lang/String;Lme/proton/core/notification/domain/entity/NotificationPayload;ILjava/lang/Object;)Lme/proton/core/notification/domain/entity/Notification;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNotificationId ()Lme/proton/core/notification/domain/entity/NotificationId;
	public final fun getPayload ()Lme/proton/core/notification/domain/entity/NotificationPayload;
	public final fun getTime ()J
	public final fun getType ()Ljava/lang/String;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/notification/domain/entity/NotificationId {
	public static final field Companion Lme/proton/core/notification/domain/entity/NotificationId$Companion;
	public synthetic fun <init> (ILjava/lang/String;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/notification/domain/entity/NotificationId;
	public static synthetic fun copy$default (Lme/proton/core/notification/domain/entity/NotificationId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/notification/domain/entity/NotificationId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public static final fun write$Self (Lme/proton/core/notification/domain/entity/NotificationId;Lkotlinx/serialization/encoding/CompositeEncoder;Lkotlinx/serialization/descriptors/SerialDescriptor;)V
}

public final class me/proton/core/notification/domain/entity/NotificationId$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lme/proton/core/notification/domain/entity/NotificationId$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lme/proton/core/notification/domain/entity/NotificationId;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lme/proton/core/notification/domain/entity/NotificationId;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class me/proton/core/notification/domain/entity/NotificationId$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public abstract class me/proton/core/notification/domain/entity/NotificationPayload {
	public synthetic fun <init> (Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getRaw ()Ljava/lang/String;
}

public final class me/proton/core/notification/domain/entity/NotificationPayload$Unencrypted : me/proton/core/notification/domain/entity/NotificationPayload {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/notification/domain/entity/NotificationPayload$Unencrypted;
	public static synthetic fun copy$default (Lme/proton/core/notification/domain/entity/NotificationPayload$Unencrypted;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/notification/domain/entity/NotificationPayload$Unencrypted;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBody ()Ljava/lang/String;
	public fun getRaw ()Ljava/lang/String;
	public final fun getSubtitle ()Ljava/lang/String;
	public final fun getTitle ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/notification/domain/entity/NotificationPayload$Unknown : me/proton/core/notification/domain/entity/NotificationPayload {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/notification/domain/entity/NotificationPayload$Unknown;
	public static synthetic fun copy$default (Lme/proton/core/notification/domain/entity/NotificationPayload$Unknown;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/notification/domain/entity/NotificationPayload$Unknown;
	public fun equals (Ljava/lang/Object;)Z
	public fun getRaw ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class me/proton/core/notification/domain/repository/NotificationLocalDataSource {
	public abstract fun deleteAllNotificationsByUser ([Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteNotificationsById (Lme/proton/core/domain/entity/UserId;[Lme/proton/core/notification/domain/entity/NotificationId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getNotificationById (Lme/proton/core/domain/entity/UserId;Lme/proton/core/notification/domain/entity/NotificationId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getNotificationsByUser (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAllNotificationsByUser (Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun upsertNotifications ([Lme/proton/core/notification/domain/entity/Notification;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/notification/domain/repository/NotificationRemoteDataSource {
	public abstract fun getNotifications (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getNotificationsByType (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/notification/domain/repository/NotificationRepository {
	public abstract fun deleteAllNotificationsByUser (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteNotificationById (Lme/proton/core/domain/entity/UserId;Lme/proton/core/notification/domain/entity/NotificationId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAllNotificationsByUser (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getNotificationById (Lme/proton/core/domain/entity/UserId;Lme/proton/core/notification/domain/entity/NotificationId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAllNotificationsByUser (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun upsertNotifications ([Lme/proton/core/notification/domain/entity/Notification;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/notification/domain/repository/NotificationRepository$DefaultImpls {
	public static synthetic fun getAllNotificationsByUser$default (Lme/proton/core/notification/domain/repository/NotificationRepository;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getNotificationById$default (Lme/proton/core/notification/domain/repository/NotificationRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/notification/domain/entity/NotificationId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeAllNotificationsByUser$default (Lme/proton/core/notification/domain/repository/NotificationRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
}

public abstract interface class me/proton/core/notification/domain/usecase/CancelNotificationView {
	public abstract fun invoke (Lme/proton/core/notification/domain/entity/Notification;)V
	public abstract fun invoke (Lme/proton/core/notification/domain/entity/NotificationId;Lme/proton/core/domain/entity/UserId;)V
}

public abstract interface class me/proton/core/notification/domain/usecase/ConfigureNotificationChannel {
	public abstract fun invoke (Ljava/lang/String;)V
}

public abstract interface class me/proton/core/notification/domain/usecase/GetNotificationChannelId {
	public abstract fun invoke ()Ljava/lang/String;
}

public abstract interface class me/proton/core/notification/domain/usecase/IsNotificationsEnabled {
	public abstract fun invoke ()Z
}

public abstract interface class me/proton/core/notification/domain/usecase/IsNotificationsPermissionRequestEnabled {
	public abstract fun invoke ()Z
}

public abstract interface class me/proton/core/notification/domain/usecase/ObservePushNotifications {
	public abstract fun invoke (Lme/proton/core/domain/entity/UserId;)V
}

public abstract interface class me/proton/core/notification/domain/usecase/ReplaceNotificationViews {
	public abstract fun invoke (Ljava/util/List;Lme/proton/core/domain/entity/UserId;)V
}

public abstract interface class me/proton/core/notification/domain/usecase/ShowNotificationView {
	public static final field Companion Lme/proton/core/notification/domain/usecase/ShowNotificationView$Companion;
	public static final field ExtraNotificationId Ljava/lang/String;
	public static final field ExtraUserId Ljava/lang/String;
	public abstract fun invoke (Lme/proton/core/notification/domain/entity/Notification;)V
}

public final class me/proton/core/notification/domain/usecase/ShowNotificationView$Companion {
	public static final field ExtraNotificationId Ljava/lang/String;
	public static final field ExtraUserId Ljava/lang/String;
}

