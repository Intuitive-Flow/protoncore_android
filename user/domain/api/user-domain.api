public final class me/proton/core/user/domain/Constants {
	public static final field INSTANCE Lme/proton/core/user/domain/Constants;
	public static final field signedKeyListContextValue Ljava/lang/String;
	public final fun getSignedKeyListSignatureContext ()Lme/proton/core/crypto/common/pgp/SignatureContext;
	public final fun getSignedKeyListVerificationContext ()Lme/proton/core/crypto/common/pgp/VerificationContext;
}

public abstract interface class me/proton/core/user/domain/SignedKeyListChangeListener {
	public abstract fun onSKLChangeAccepted (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/UserAddress;Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onSKLChangeRequested (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/UserAddress;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/user/domain/SignedKeyListChangeListener$Result {
}

public final class me/proton/core/user/domain/SignedKeyListChangeListener$Result$Failure : me/proton/core/user/domain/SignedKeyListChangeListener$Result {
	public fun <init> (Ljava/lang/Throwable;)V
	public final fun component1 ()Ljava/lang/Throwable;
	public final fun copy (Ljava/lang/Throwable;)Lme/proton/core/user/domain/SignedKeyListChangeListener$Result$Failure;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/SignedKeyListChangeListener$Result$Failure;Ljava/lang/Throwable;ILjava/lang/Object;)Lme/proton/core/user/domain/SignedKeyListChangeListener$Result$Failure;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getReason ()Ljava/lang/Throwable;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/SignedKeyListChangeListener$Result$Success : me/proton/core/user/domain/SignedKeyListChangeListener$Result {
	public static final field INSTANCE Lme/proton/core/user/domain/SignedKeyListChangeListener$Result$Success;
}

public final class me/proton/core/user/domain/UserAddressCryptoKt {
	public static final fun generateNestedPrivateKey (Lme/proton/core/user/domain/entity/UserAddress;Lme/proton/core/crypto/common/context/CryptoContext;)Lme/proton/core/key/domain/entity/key/NestedPrivateKey;
}

public abstract interface class me/proton/core/user/domain/UserAddressManager {
	public abstract fun createAddressKey (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddress (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddresses (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAddresses (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun setupInternalAddress (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateAddress (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateOrder (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/user/domain/UserAddressManager$DefaultImpls {
	public static synthetic fun getAddress$default (Lme/proton/core/user/domain/UserAddressManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getAddresses$default (Lme/proton/core/user/domain/UserAddressManager;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeAddresses$default (Lme/proton/core/user/domain/UserAddressManager;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun updateAddress$default (Lme/proton/core/user/domain/UserAddressManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/user/domain/UserManager {
	public abstract fun addUser (Lme/proton/core/user/domain/entity/User;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun changePassword (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/crypto/common/srp/SrpProofs;Ljava/lang/String;Lme/proton/core/crypto/common/srp/Auth;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddresses (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getUser (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun lock (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAddresses (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeUser (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun setupPrimaryKeys (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/crypto/common/srp/Auth;[BLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun unlockWithPassphrase (Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/keystore/EncryptedByteArray;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun unlockWithPassword (Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/keystore/PlainByteArray;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/user/domain/UserManager$DefaultImpls {
	public static synthetic fun changePassword$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/crypto/common/srp/SrpProofs;Ljava/lang/String;Lme/proton/core/crypto/common/srp/Auth;Ljava/lang/String;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getAddresses$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getUser$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeAddresses$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observeUser$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun unlockWithPassword$default (Lme/proton/core/user/domain/UserManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/keystore/PlainByteArray;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract class me/proton/core/user/domain/UserManager$UnlockResult {
}

public abstract class me/proton/core/user/domain/UserManager$UnlockResult$Error : me/proton/core/user/domain/UserManager$UnlockResult {
}

public final class me/proton/core/user/domain/UserManager$UnlockResult$Error$NoKeySaltsForPrimaryKey : me/proton/core/user/domain/UserManager$UnlockResult$Error {
	public static final field INSTANCE Lme/proton/core/user/domain/UserManager$UnlockResult$Error$NoKeySaltsForPrimaryKey;
}

public final class me/proton/core/user/domain/UserManager$UnlockResult$Error$NoPrimaryKey : me/proton/core/user/domain/UserManager$UnlockResult$Error {
	public static final field INSTANCE Lme/proton/core/user/domain/UserManager$UnlockResult$Error$NoPrimaryKey;
}

public final class me/proton/core/user/domain/UserManager$UnlockResult$Error$PrimaryKeyInvalidPassphrase : me/proton/core/user/domain/UserManager$UnlockResult$Error {
	public static final field INSTANCE Lme/proton/core/user/domain/UserManager$UnlockResult$Error$PrimaryKeyInvalidPassphrase;
}

public final class me/proton/core/user/domain/UserManager$UnlockResult$Success : me/proton/core/user/domain/UserManager$UnlockResult {
	public static final field INSTANCE Lme/proton/core/user/domain/UserManager$UnlockResult$Success;
}

public final class me/proton/core/user/domain/entity/AddressId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/user/domain/entity/AddressId;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/AddressId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/AddressType : java/lang/Enum {
	public static final field Alias Lme/proton/core/user/domain/entity/AddressType;
	public static final field Companion Lme/proton/core/user/domain/entity/AddressType$Companion;
	public static final field Custom Lme/proton/core/user/domain/entity/AddressType;
	public static final field External Lme/proton/core/user/domain/entity/AddressType;
	public static final field Original Lme/proton/core/user/domain/entity/AddressType;
	public static final field Premium Lme/proton/core/user/domain/entity/AddressType;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/AddressType;
	public static fun values ()[Lme/proton/core/user/domain/entity/AddressType;
}

public final class me/proton/core/user/domain/entity/AddressType$Companion {
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/entity/CreateUserType : java/lang/Enum {
	public static final field Normal Lme/proton/core/user/domain/entity/CreateUserType;
	public static final field Username Lme/proton/core/user/domain/entity/CreateUserType;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/CreateUserType;
	public static fun values ()[Lme/proton/core/user/domain/entity/CreateUserType;
}

public final class me/proton/core/user/domain/entity/CreateUserTypeKt {
	public static final fun createUserType (Lme/proton/core/account/domain/entity/AccountType;)Lme/proton/core/user/domain/entity/CreateUserType;
}

public final class me/proton/core/user/domain/entity/Delinquent : java/lang/Enum {
	public static final field Companion Lme/proton/core/user/domain/entity/Delinquent$Companion;
	public static final field InvoiceAvailable Lme/proton/core/user/domain/entity/Delinquent;
	public static final field InvoiceDelinquent Lme/proton/core/user/domain/entity/Delinquent;
	public static final field InvoiceMailDisabled Lme/proton/core/user/domain/entity/Delinquent;
	public static final field InvoiceOverdue Lme/proton/core/user/domain/entity/Delinquent;
	public static final field None Lme/proton/core/user/domain/entity/Delinquent;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/Delinquent;
	public static fun values ()[Lme/proton/core/user/domain/entity/Delinquent;
}

public final class me/proton/core/user/domain/entity/Delinquent$Companion {
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/entity/DisplayName {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/user/domain/entity/DisplayName;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/DisplayName;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/DisplayName;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFirstName ()Ljava/lang/String;
	public final fun getLastName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/DisplayNameKt {
	public static final fun getDisplayNameSplit (Lme/proton/core/user/domain/entity/User;)Lme/proton/core/user/domain/entity/DisplayName;
}

public final class me/proton/core/user/domain/entity/Email {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/user/domain/entity/Email;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/Email;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/Email;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDomain ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public final fun getValue ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/EmailKt {
	public static final fun getEmailSplit (Lme/proton/core/user/domain/entity/User;)Lme/proton/core/user/domain/entity/Email;
	public static final fun getEmailSplit (Lme/proton/core/user/domain/entity/UserAddress;)Lme/proton/core/user/domain/entity/Email;
}

public final class me/proton/core/user/domain/entity/Role : java/lang/Enum {
	public static final field Companion Lme/proton/core/user/domain/entity/Role$Companion;
	public static final field NoOrganization Lme/proton/core/user/domain/entity/Role;
	public static final field OrganizationAdmin Lme/proton/core/user/domain/entity/Role;
	public static final field OrganizationMember Lme/proton/core/user/domain/entity/Role;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/Role;
	public static fun values ()[Lme/proton/core/user/domain/entity/Role;
}

public final class me/proton/core/user/domain/entity/Role$Companion {
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/entity/Type : java/lang/Enum {
	public static final field Companion Lme/proton/core/user/domain/entity/Type$Companion;
	public static final field CredentialLess Lme/proton/core/user/domain/entity/Type;
	public static final field External Lme/proton/core/user/domain/entity/Type;
	public static final field Managed Lme/proton/core/user/domain/entity/Type;
	public static final field Proton Lme/proton/core/user/domain/entity/Type;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/Type;
	public static fun values ()[Lme/proton/core/user/domain/entity/Type;
}

public final class me/proton/core/user/domain/entity/Type$Companion {
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/entity/User : me/proton/core/key/domain/entity/keyholder/KeyHolder {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILme/proton/core/user/domain/entity/Type;JJJJLme/proton/core/user/domain/entity/Role;ZIILme/proton/core/user/domain/entity/Delinquent;Lme/proton/core/user/domain/entity/UserRecovery;Ljava/util/List;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)V
	public synthetic fun <init> (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILme/proton/core/user/domain/entity/Type;JJJJLme/proton/core/user/domain/entity/Role;ZIILme/proton/core/user/domain/entity/Delinquent;Lme/proton/core/user/domain/entity/UserRecovery;Ljava/util/List;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component10 ()J
	public final fun component11 ()J
	public final fun component12 ()Lme/proton/core/user/domain/entity/Role;
	public final fun component13 ()Z
	public final fun component14 ()I
	public final fun component15 ()I
	public final fun component16 ()Lme/proton/core/user/domain/entity/Delinquent;
	public final fun component17 ()Lme/proton/core/user/domain/entity/UserRecovery;
	public final fun component18 ()Ljava/util/List;
	public final fun component19 ()Ljava/lang/Long;
	public final fun component2 ()Ljava/lang/String;
	public final fun component20 ()Ljava/lang/Long;
	public final fun component21 ()Ljava/lang/Long;
	public final fun component22 ()Ljava/lang/Long;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()I
	public final fun component7 ()Lme/proton/core/user/domain/entity/Type;
	public final fun component8 ()J
	public final fun component9 ()J
	public final fun copy (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILme/proton/core/user/domain/entity/Type;JJJJLme/proton/core/user/domain/entity/Role;ZIILme/proton/core/user/domain/entity/Delinquent;Lme/proton/core/user/domain/entity/UserRecovery;Ljava/util/List;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)Lme/proton/core/user/domain/entity/User;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/User;Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILme/proton/core/user/domain/entity/Type;JJJJLme/proton/core/user/domain/entity/Role;ZIILme/proton/core/user/domain/entity/Delinquent;Lme/proton/core/user/domain/entity/UserRecovery;Ljava/util/List;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/User;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCreatedAtUtc ()J
	public final fun getCredit ()I
	public final fun getCurrency ()Ljava/lang/String;
	public final fun getDelinquent ()Lme/proton/core/user/domain/entity/Delinquent;
	public final fun getDisplayName ()Ljava/lang/String;
	public final fun getEmail ()Ljava/lang/String;
	public fun getKeys ()Ljava/util/List;
	public final fun getMaxBaseSpace ()Ljava/lang/Long;
	public final fun getMaxDriveSpace ()Ljava/lang/Long;
	public final fun getMaxSpace ()J
	public final fun getMaxUpload ()J
	public final fun getName ()Ljava/lang/String;
	public final fun getPrivate ()Z
	public final fun getRecovery ()Lme/proton/core/user/domain/entity/UserRecovery;
	public final fun getRole ()Lme/proton/core/user/domain/entity/Role;
	public final fun getServices ()I
	public final fun getSubscribed ()I
	public final fun getType ()Lme/proton/core/user/domain/entity/Type;
	public final fun getUsedBaseSpace ()Ljava/lang/Long;
	public final fun getUsedDriveSpace ()Ljava/lang/Long;
	public final fun getUsedSpace ()J
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/UserAddress : me/proton/core/key/domain/entity/keyholder/KeyHolder {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLme/proton/core/user/domain/entity/AddressType;ILjava/util/List;Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;)V
	public synthetic fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLme/proton/core/user/domain/entity/AddressType;ILjava/util/List;Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component10 ()Lme/proton/core/user/domain/entity/AddressType;
	public final fun component11 ()I
	public final fun component12 ()Ljava/util/List;
	public final fun component13 ()Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;
	public final fun component2 ()Lme/proton/core/user/domain/entity/AddressId;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun component7 ()Z
	public final fun component8 ()Z
	public final fun component9 ()Z
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLme/proton/core/user/domain/entity/AddressType;ILjava/util/List;Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;)Lme/proton/core/user/domain/entity/UserAddress;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/UserAddress;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLme/proton/core/user/domain/entity/AddressType;ILjava/util/List;Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/UserAddress;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAddressId ()Lme/proton/core/user/domain/entity/AddressId;
	public final fun getCanReceive ()Z
	public final fun getCanSend ()Z
	public final fun getDisplayName ()Ljava/lang/String;
	public final fun getDomainId ()Ljava/lang/String;
	public final fun getEmail ()Ljava/lang/String;
	public final fun getEnabled ()Z
	public fun getKeys ()Ljava/util/List;
	public final fun getOrder ()I
	public final fun getSignature ()Ljava/lang/String;
	public final fun getSignedKeyList ()Lme/proton/core/key/domain/entity/key/PublicSignedKeyList;
	public final fun getType ()Lme/proton/core/user/domain/entity/AddressType;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/UserAddressKey : me/proton/core/key/domain/entity/keyholder/KeyHolderPrivateKey {
	public fun <init> (Lme/proton/core/user/domain/entity/AddressId;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;)V
	public synthetic fun <init> (Lme/proton/core/user/domain/entity/AddressId;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/user/domain/entity/AddressId;
	public final fun component2 ()I
	public final fun component3 ()I
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun component7 ()Z
	public final fun component8 ()Lme/proton/core/key/domain/entity/key/KeyId;
	public final fun component9 ()Lme/proton/core/key/domain/entity/key/PrivateKey;
	public final fun copy (Lme/proton/core/user/domain/entity/AddressId;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;)Lme/proton/core/user/domain/entity/UserAddressKey;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/UserAddressKey;Lme/proton/core/user/domain/entity/AddressId;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/UserAddressKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getActivation ()Ljava/lang/String;
	public final fun getActive ()Z
	public final fun getAddressId ()Lme/proton/core/user/domain/entity/AddressId;
	public final fun getFlags ()I
	public fun getKeyId ()Lme/proton/core/key/domain/entity/key/KeyId;
	public fun getPrivateKey ()Lme/proton/core/key/domain/entity/key/PrivateKey;
	public final fun getSignature ()Ljava/lang/String;
	public final fun getToken ()Ljava/lang/String;
	public final fun getVersion ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/UserAddressKt {
	public static final fun hasNoKeys (Lme/proton/core/user/domain/entity/UserAddress;)Z
	public static final fun isExternal (Lme/proton/core/user/domain/entity/UserAddress;)Z
	public static final fun isInternal (Lme/proton/core/user/domain/entity/UserAddress;)Z
}

public final class me/proton/core/user/domain/entity/UserKey : me/proton/core/key/domain/entity/keyholder/KeyHolderPrivateKey {
	public fun <init> (Lme/proton/core/domain/entity/UserId;ILjava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;)V
	public synthetic fun <init> (Lme/proton/core/domain/entity/UserId;ILjava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()I
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/Boolean;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun component7 ()Lme/proton/core/key/domain/entity/key/KeyId;
	public final fun component8 ()Lme/proton/core/key/domain/entity/key/PrivateKey;
	public final fun copy (Lme/proton/core/domain/entity/UserId;ILjava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;)Lme/proton/core/user/domain/entity/UserKey;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/UserKey;Lme/proton/core/domain/entity/UserId;ILjava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/key/domain/entity/key/KeyId;Lme/proton/core/key/domain/entity/key/PrivateKey;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/UserKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getActivation ()Ljava/lang/String;
	public final fun getActive ()Ljava/lang/Boolean;
	public fun getKeyId ()Lme/proton/core/key/domain/entity/key/KeyId;
	public fun getPrivateKey ()Lme/proton/core/key/domain/entity/key/PrivateKey;
	public final fun getRecoverySecret ()Ljava/lang/String;
	public final fun getRecoverySecretSignature ()Ljava/lang/String;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public final fun getVersion ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/UserRecovery {
	public fun <init> (Lme/proton/core/domain/type/IntEnum;JJLme/proton/core/network/domain/session/SessionId;Lme/proton/core/user/domain/entity/UserRecovery$Reason;)V
	public final fun component1 ()Lme/proton/core/domain/type/IntEnum;
	public final fun component2 ()J
	public final fun component3 ()J
	public final fun component4 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component5 ()Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public final fun copy (Lme/proton/core/domain/type/IntEnum;JJLme/proton/core/network/domain/session/SessionId;Lme/proton/core/user/domain/entity/UserRecovery$Reason;)Lme/proton/core/user/domain/entity/UserRecovery;
	public static synthetic fun copy$default (Lme/proton/core/user/domain/entity/UserRecovery;Lme/proton/core/domain/type/IntEnum;JJLme/proton/core/network/domain/session/SessionId;Lme/proton/core/user/domain/entity/UserRecovery$Reason;ILjava/lang/Object;)Lme/proton/core/user/domain/entity/UserRecovery;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getEndTime ()J
	public final fun getReason ()Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public final fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun getStartTime ()J
	public final fun getState ()Lme/proton/core/domain/type/IntEnum;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/user/domain/entity/UserRecovery$Reason : java/lang/Enum {
	public static final field Authentication Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public static final field Cancelled Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public static final field Companion Lme/proton/core/user/domain/entity/UserRecovery$Reason$Companion;
	public static final field None Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/UserRecovery$Reason;
	public static fun values ()[Lme/proton/core/user/domain/entity/UserRecovery$Reason;
}

public final class me/proton/core/user/domain/entity/UserRecovery$Reason$Companion {
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/entity/UserRecovery$State : java/lang/Enum {
	public static final field Cancelled Lme/proton/core/user/domain/entity/UserRecovery$State;
	public static final field Companion Lme/proton/core/user/domain/entity/UserRecovery$State$Companion;
	public static final field Expired Lme/proton/core/user/domain/entity/UserRecovery$State;
	public static final field Grace Lme/proton/core/user/domain/entity/UserRecovery$State;
	public static final field Insecure Lme/proton/core/user/domain/entity/UserRecovery$State;
	public static final field None Lme/proton/core/user/domain/entity/UserRecovery$State;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/user/domain/entity/UserRecovery$State;
	public static fun values ()[Lme/proton/core/user/domain/entity/UserRecovery$State;
}

public final class me/proton/core/user/domain/entity/UserRecovery$State$Companion {
	public final fun enumOf (I)Lme/proton/core/domain/type/IntEnum;
	public final fun getMap ()Ljava/util/Map;
}

public final class me/proton/core/user/domain/extension/UserAddressKeyKt {
	public static final fun canEncrypt (I)Z
	public static final fun canEncrypt (Lme/proton/core/user/domain/entity/UserAddressKey;)Z
	public static final fun canVerify (I)Z
	public static final fun canVerify (Lme/proton/core/user/domain/entity/UserAddressKey;)Z
}

public final class me/proton/core/user/domain/extension/UserAddressListKt {
	public static final fun filterExternal (Ljava/util/List;)Ljava/util/List;
	public static final fun filterHasNoKeys (Ljava/util/List;)Ljava/util/List;
	public static final fun filterInternal (Ljava/util/List;)Ljava/util/List;
	public static final fun firstInternalOrNull (Ljava/util/List;)Lme/proton/core/user/domain/entity/UserAddress;
	public static final fun generateNewKeyFormat (Ljava/util/List;)Z
	public static final fun hasInternalAddressKey (Ljava/util/List;)Z
	public static final fun hasMigratedKey (Ljava/util/List;)Z
	public static final fun hasMissingKeys (Ljava/util/List;)Z
	public static final fun hasOriginalAddress (Ljava/util/List;)Z
	public static final fun primary (Ljava/util/List;)Lme/proton/core/user/domain/entity/UserAddress;
	public static final fun sorted (Ljava/util/List;)Ljava/util/List;
}

public final class me/proton/core/user/domain/extension/UserIdKt {
	public static final fun isNullOrCredentialLess (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/UserManager;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/user/domain/extension/UserKt {
	public static final fun canReadSubscription (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun displayNameNotNull (Lme/proton/core/user/domain/entity/User;)Ljava/lang/String;
	public static final fun getInitials (Lme/proton/core/user/domain/entity/User;ILjava/lang/String;)Ljava/lang/String;
	public static synthetic fun getInitials$default (Lme/proton/core/user/domain/entity/User;ILjava/lang/String;ILjava/lang/Object;)Ljava/lang/String;
	public static final fun getUsedBaseSpacePercentage (Lme/proton/core/user/domain/entity/User;)Ljava/lang/Integer;
	public static final fun getUsedDriveSpacePercentage (Lme/proton/core/user/domain/entity/User;)Ljava/lang/Integer;
	public static final fun getUsedTotalSpacePercentage (Lme/proton/core/user/domain/entity/User;)I
	public static final fun hasKeys (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasUsername (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isCredentialLess (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isNotOrganizationUser (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isOrganizationAdmin (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isOrganizationMember (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isOrganizationUser (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun isPrivate (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun nameNotNull (Lme/proton/core/user/domain/entity/User;)Ljava/lang/String;
}

public final class me/proton/core/user/domain/extension/UserPlanKt {
	public static final fun hasService (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasServiceForMail (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasServiceForVpn (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasSubscription (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasSubscriptionForMail (Lme/proton/core/user/domain/entity/User;)Z
	public static final fun hasSubscriptionForVpn (Lme/proton/core/user/domain/entity/User;)Z
}

public abstract interface class me/proton/core/user/domain/repository/DomainRepository {
	public abstract fun getAvailableDomains (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/user/domain/repository/PassphraseRepository {
	public abstract fun addOnPassphraseChangedListener (Lme/proton/core/user/domain/repository/PassphraseRepository$OnPassphraseChangedListener;)V
	public abstract fun clearPassphrase (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getPassphrase (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun setPassphrase (Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/keystore/EncryptedByteArray;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/user/domain/repository/PassphraseRepository$OnPassphraseChangedListener {
	public abstract fun onPassphraseChanged (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/user/domain/repository/UserAddressRepository {
	public abstract fun addAddresses (Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun createAddress (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteAddresses (Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteAllAddresses (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddress (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAddresses (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeAddress (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeAddresses (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun updateAddress (Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateAddresses (Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateOrder (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/user/domain/repository/UserAddressRepository$DefaultImpls {
	public static synthetic fun getAddress$default (Lme/proton/core/user/domain/repository/UserAddressRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getAddresses$default (Lme/proton/core/user/domain/repository/UserAddressRepository;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeAddress$default (Lme/proton/core/user/domain/repository/UserAddressRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observeAddresses$default (Lme/proton/core/user/domain/repository/UserAddressRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun updateAddress$default (Lme/proton/core/user/domain/repository/UserAddressRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/user/domain/entity/AddressId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/user/domain/repository/UserRepository : me/proton/core/user/domain/repository/PassphraseRepository {
	public abstract fun addUser (Lme/proton/core/user/domain/entity/User;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun checkExternalEmailAvailable (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun checkUsernameAvailable (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun createExternalEmailUser (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/user/domain/entity/CreateUserType;Lme/proton/core/crypto/common/srp/Auth;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun createUser (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/user/domain/entity/CreateUserType;Lme/proton/core/crypto/common/srp/Auth;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getUser (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeUser (Lme/proton/core/domain/entity/UserId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun removeLockedAndPasswordScopes (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun unlockUserForLockedScope (Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/srp/SrpProofs;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun unlockUserForPasswordScope (Lme/proton/core/domain/entity/UserId;Lme/proton/core/crypto/common/srp/SrpProofs;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateUser (Lme/proton/core/user/domain/entity/User;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateUserUsedBaseSpace (Lme/proton/core/domain/entity/UserId;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateUserUsedDriveSpace (Lme/proton/core/domain/entity/UserId;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateUserUsedSpace (Lme/proton/core/domain/entity/UserId;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/user/domain/repository/UserRepository$DefaultImpls {
	public static synthetic fun getUser$default (Lme/proton/core/user/domain/repository/UserRepository;Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun observeUser$default (Lme/proton/core/user/domain/repository/UserRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
}

public final class me/proton/core/user/domain/usecase/GetUser {
	public fun <init> (Lme/proton/core/user/domain/repository/UserRepository;)V
	public final fun invoke (Lme/proton/core/domain/entity/UserId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

