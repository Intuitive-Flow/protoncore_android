public final class me/proton/core/account/data/BuildConfig {
	public static final field BUILD_TYPE Ljava/lang/String;
	public static final field DEBUG Z
	public static final field LIBRARY_PACKAGE_NAME Ljava/lang/String;
	public fun <init> ()V
}

public final class me/proton/core/account/data/db/AccountConverters {
	public fun <init> ()V
	public final fun fromAccountStateToString (Lme/proton/core/account/domain/entity/AccountState;)Ljava/lang/String;
	public final fun fromAccountTypeToString (Lme/proton/core/account/domain/entity/AccountType;)Ljava/lang/String;
	public final fun fromSessionStateToString (Lme/proton/core/account/domain/entity/SessionState;)Ljava/lang/String;
	public final fun fromStringToAccountState (Ljava/lang/String;)Lme/proton/core/account/domain/entity/AccountState;
	public final fun fromStringToAccountType (Ljava/lang/String;)Lme/proton/core/account/domain/entity/AccountType;
	public final fun fromStringToSessionState (Ljava/lang/String;)Lme/proton/core/account/domain/entity/SessionState;
}

public abstract class me/proton/core/account/data/db/AccountDao : me/proton/core/data/room/db/BaseDao {
	public fun <init> ()V
	public abstract fun addSession (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun delete (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun deleteAll (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun findAll ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun findBySessionId (Lme/proton/core/network/domain/session/SessionId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun findByUserId (Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun getBySessionId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getByUserId (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun removeSession (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateAccountState (Lme/proton/core/domain/entity/UserId;Lme/proton/core/account/domain/entity/AccountState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateSessionState (Lme/proton/core/domain/entity/UserId;Lme/proton/core/account/domain/entity/SessionState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/account/data/db/AccountDatabase : me/proton/core/data/room/db/Database {
	public static final field Companion Lme/proton/core/account/data/db/AccountDatabase$Companion;
	public abstract fun accountDao ()Lme/proton/core/account/data/db/AccountDao;
	public abstract fun accountMetadataDao ()Lme/proton/core/account/data/db/AccountMetadataDao;
	public abstract fun sessionDao ()Lme/proton/core/account/data/db/SessionDao;
	public abstract fun sessionDetailsDao ()Lme/proton/core/account/data/db/SessionDetailsDao;
}

public final class me/proton/core/account/data/db/AccountDatabase$Companion {
	public final fun getMIGRATION_0 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_1 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_2 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_3 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_4 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_5 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_6 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
	public final fun getMIGRATION_7 ()Lme/proton/core/data/room/db/migration/DatabaseMigration;
}

public abstract class me/proton/core/account/data/db/AccountMetadataDao : me/proton/core/data/room/db/BaseDao {
	public fun <init> ()V
	public abstract fun delete (Lme/proton/core/domain/entity/Product;Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAllDescending (Lme/proton/core/domain/entity/Product;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getByUserId (Lme/proton/core/domain/entity/Product;Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observeLatestPrimary (Lme/proton/core/domain/entity/Product;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun updateMigrations (Lme/proton/core/domain/entity/Product;Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/account/data/db/SessionDao : me/proton/core/data/room/db/BaseDao {
	public fun <init> ()V
	public abstract fun delete (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun findAll (Lme/proton/core/domain/entity/Product;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun findBySessionId (Lme/proton/core/network/domain/session/SessionId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun get (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getSessionId (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getUnauthenticatedSessionId (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateScopes (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateToken (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/account/data/db/SessionDetailsDao : me/proton/core/data/room/db/BaseDao {
	public fun <init> ()V
	public abstract fun clearPassword (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun delete (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun findBySessionId (Lme/proton/core/network/domain/session/SessionId;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun getBySessionId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/account/data/entity/AccountEntity {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountState;Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/SessionState;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Lme/proton/core/account/domain/entity/AccountState;
	public final fun component5 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component6 ()Lme/proton/core/account/domain/entity/SessionState;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountState;Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/SessionState;)Lme/proton/core/account/data/entity/AccountEntity;
	public static synthetic fun copy$default (Lme/proton/core/account/data/entity/AccountEntity;Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountState;Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/SessionState;ILjava/lang/Object;)Lme/proton/core/account/data/entity/AccountEntity;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getEmail ()Ljava/lang/String;
	public final fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun getSessionState ()Lme/proton/core/account/domain/entity/SessionState;
	public final fun getState ()Lme/proton/core/account/domain/entity/AccountState;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun toAccount (Lme/proton/core/account/domain/entity/AccountDetails;)Lme/proton/core/account/domain/entity/Account;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/account/data/entity/AccountMetadataEntity {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/domain/entity/Product;JLjava/util/List;)V
	public synthetic fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/domain/entity/Product;JLjava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Lme/proton/core/domain/entity/Product;
	public final fun component3 ()J
	public final fun component4 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/domain/entity/Product;JLjava/util/List;)Lme/proton/core/account/data/entity/AccountMetadataEntity;
	public static synthetic fun copy$default (Lme/proton/core/account/data/entity/AccountMetadataEntity;Lme/proton/core/domain/entity/UserId;Lme/proton/core/domain/entity/Product;JLjava/util/List;ILjava/lang/Object;)Lme/proton/core/account/data/entity/AccountMetadataEntity;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMigrations ()Ljava/util/List;
	public final fun getPrimaryAtUtc ()J
	public final fun getProduct ()Lme/proton/core/domain/entity/Product;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public final fun toAccountMetadataDetails ()Lme/proton/core/account/domain/entity/AccountMetadataDetails;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/account/data/entity/SessionDetailsEntity {
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountType;ZZLjava/lang/String;)V
	public final fun component1 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Lme/proton/core/account/domain/entity/AccountType;
	public final fun component4 ()Z
	public final fun component5 ()Z
	public final fun component6 ()Ljava/lang/String;
	public final fun copy (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountType;ZZLjava/lang/String;)Lme/proton/core/account/data/entity/SessionDetailsEntity;
	public static synthetic fun copy$default (Lme/proton/core/account/data/entity/SessionDetailsEntity;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Lme/proton/core/account/domain/entity/AccountType;ZZLjava/lang/String;ILjava/lang/Object;)Lme/proton/core/account/data/entity/SessionDetailsEntity;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getInitialEventId ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRequiredAccountType ()Lme/proton/core/account/domain/entity/AccountType;
	public final fun getSecondFactorEnabled ()Z
	public final fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun getTwoPassModeEnabled ()Z
	public fun hashCode ()I
	public final fun toSessionDetails ()Lme/proton/core/account/domain/entity/SessionDetails;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/account/data/entity/SessionEntity {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lme/proton/core/domain/entity/Product;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/util/List;
	public final fun component6 ()Lme/proton/core/domain/entity/Product;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lme/proton/core/domain/entity/Product;)Lme/proton/core/account/data/entity/SessionEntity;
	public static synthetic fun copy$default (Lme/proton/core/account/data/entity/SessionEntity;Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lme/proton/core/domain/entity/Product;ILjava/lang/Object;)Lme/proton/core/account/data/entity/SessionEntity;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAccessToken ()Ljava/lang/String;
	public final fun getProduct ()Lme/proton/core/domain/entity/Product;
	public final fun getRefreshToken ()Ljava/lang/String;
	public final fun getScopes ()Ljava/util/List;
	public final fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public final fun toSession (Lme/proton/core/crypto/common/keystore/KeyStoreCrypto;)Lme/proton/core/network/domain/session/Session;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/account/data/extension/AccountKt {
	public static final fun toAccountEntity (Lme/proton/core/account/domain/entity/Account;)Lme/proton/core/account/data/entity/AccountEntity;
}

public final class me/proton/core/account/data/extension/SessionKt {
	public static final fun toSessionEntity (Lme/proton/core/network/domain/session/Session;Lme/proton/core/domain/entity/UserId;Lme/proton/core/domain/entity/Product;Lme/proton/core/crypto/common/keystore/KeyStoreCrypto;)Lme/proton/core/account/data/entity/SessionEntity;
}

public final class me/proton/core/account/data/repository/AccountRepositoryImpl : me/proton/core/account/domain/repository/AccountRepository {
	public fun <init> (Lme/proton/core/domain/entity/Product;Lme/proton/core/account/data/db/AccountDatabase;Lme/proton/core/crypto/common/keystore/KeyStoreCrypto;)V
	public fun addMigration (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun clearSessionDetails (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createOrUpdateAccountSession (Lme/proton/core/account/domain/entity/Account;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun createOrUpdateSession (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun deleteAccount (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun deleteSession (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAccount (Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/flow/Flow;
	public fun getAccount (Lme/proton/core/network/domain/session/SessionId;)Lkotlinx/coroutines/flow/Flow;
	public fun getAccountOrNull (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAccountOrNull (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAccounts ()Lkotlinx/coroutines/flow/Flow;
	public fun getPreviousPrimaryUserId (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getPrimaryUserId ()Lkotlinx/coroutines/flow/Flow;
	public fun getSession (Lme/proton/core/network/domain/session/SessionId;)Lkotlinx/coroutines/flow/Flow;
	public fun getSessionDetails (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessionIdOrNull (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessionOrNull (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessions ()Lkotlinx/coroutines/flow/Flow;
	public fun onAccountStateChanged (Z)Lkotlinx/coroutines/flow/Flow;
	public fun onSessionStateChanged (Z)Lkotlinx/coroutines/flow/Flow;
	public fun removeMigration (Lme/proton/core/domain/entity/UserId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setAsPrimary (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setSessionDetails (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/SessionDetails;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateAccountState (Lme/proton/core/domain/entity/UserId;Lme/proton/core/account/domain/entity/AccountState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateAccountState (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/AccountState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateSessionScopes (Lme/proton/core/network/domain/session/SessionId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateSessionState (Lme/proton/core/domain/entity/UserId;Lme/proton/core/account/domain/entity/SessionState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateSessionState (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/account/domain/entity/SessionState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun updateSessionToken (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

