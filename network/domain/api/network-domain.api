public abstract interface class me/proton/core/network/domain/ApiBackend {
	public abstract fun getBaseUrl ()Ljava/lang/String;
	public abstract fun invoke (Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun isPotentiallyBlocked (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/network/domain/ApiClient {
	public abstract fun forceUpdate (Ljava/lang/String;)V
	public abstract fun getAlternativesTotalTimeout ()J
	public abstract fun getAppVersionHeader ()Ljava/lang/String;
	public abstract fun getBackoffBaseDelayMs ()I
	public abstract fun getBackoffRetryCount ()I
	public abstract fun getCallTimeoutSeconds ()J
	public abstract fun getConnectTimeoutSeconds ()J
	public abstract fun getDohRecordType ()Lme/proton/core/network/domain/ApiClient$DohRecordType;
	public abstract fun getDohServiceTimeoutMs ()J
	public abstract fun getEnableDebugLogging ()Z
	public abstract fun getPingTimeoutSeconds ()I
	public abstract fun getProxyValidityPeriodMs ()J
	public abstract fun getReadTimeoutSeconds ()J
	public abstract fun getShouldUseDoh ()Z
	public abstract fun getUseAltRoutingCertVerificationForMainRoute ()Z
	public abstract fun getUserAgent ()Ljava/lang/String;
	public abstract fun getWriteTimeoutSeconds ()J
}

public final class me/proton/core/network/domain/ApiClient$DefaultImpls {
	public static fun getAlternativesTotalTimeout (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getBackoffBaseDelayMs (Lme/proton/core/network/domain/ApiClient;)I
	public static fun getBackoffRetryCount (Lme/proton/core/network/domain/ApiClient;)I
	public static fun getCallTimeoutSeconds (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getConnectTimeoutSeconds (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getDohRecordType (Lme/proton/core/network/domain/ApiClient;)Lme/proton/core/network/domain/ApiClient$DohRecordType;
	public static fun getDohServiceTimeoutMs (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getPingTimeoutSeconds (Lme/proton/core/network/domain/ApiClient;)I
	public static fun getProxyValidityPeriodMs (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getReadTimeoutSeconds (Lme/proton/core/network/domain/ApiClient;)J
	public static fun getUseAltRoutingCertVerificationForMainRoute (Lme/proton/core/network/domain/ApiClient;)Z
	public static fun getWriteTimeoutSeconds (Lme/proton/core/network/domain/ApiClient;)J
}

public final class me/proton/core/network/domain/ApiClient$DohRecordType : java/lang/Enum {
	public static final field A Lme/proton/core/network/domain/ApiClient$DohRecordType;
	public static final field TXT Lme/proton/core/network/domain/ApiClient$DohRecordType;
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/ApiClient$DohRecordType;
	public static fun values ()[Lme/proton/core/network/domain/ApiClient$DohRecordType;
}

public abstract interface class me/proton/core/network/domain/ApiErrorHandler {
	public abstract fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public class me/proton/core/network/domain/ApiException : java/lang/Exception {
	public fun <init> (Lme/proton/core/network/domain/ApiResult$Error;)V
	public final fun getError ()Lme/proton/core/network/domain/ApiResult$Error;
}

public abstract interface class me/proton/core/network/domain/ApiManager {
	public abstract fun invoke (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun invoke (ZLkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/ApiManager$Call {
	public fun <init> (JLkotlin/jvm/functions/Function2;)V
	public final fun component1 ()J
	public final fun component2 ()Lkotlin/jvm/functions/Function2;
	public final fun copy (JLkotlin/jvm/functions/Function2;)Lme/proton/core/network/domain/ApiManager$Call;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/ApiManager$Call;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lme/proton/core/network/domain/ApiManager$Call;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlock ()Lkotlin/jvm/functions/Function2;
	public final fun getTimestampMs ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/ApiManager$DefaultImpls {
	public static fun invoke (Lme/proton/core/network/domain/ApiManager;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/ApiManagerImpl : me/proton/core/network/domain/ApiManager {
	public fun <init> (Lme/proton/core/network/domain/ApiClient;Lme/proton/core/network/domain/ApiBackend;Ljava/util/List;Lkotlin/jvm/functions/Function0;)V
	public fun invoke (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun invoke (ZLkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/network/domain/ApiResult {
	public final fun getExceptionOrNull ()Ljava/lang/Throwable;
	public fun getValueOrNull ()Ljava/lang/Object;
	public final fun getValueOrThrow ()Ljava/lang/Object;
	public fun isPotentialBlocking ()Z
	public abstract fun isSuccess ()Z
	public final fun throwIfError ()V
}

public abstract class me/proton/core/network/domain/ApiResult$Error : me/proton/core/network/domain/ApiResult {
	public synthetic fun <init> (Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Ljava/lang/Throwable;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getCause ()Ljava/lang/Throwable;
	public fun isSuccess ()Z
}

public final class me/proton/core/network/domain/ApiResult$Error$Certificate : me/proton/core/network/domain/ApiResult$Error$Connection {
	public fun <init> (Ljava/lang/Throwable;)V
}

public class me/proton/core/network/domain/ApiResult$Error$Connection : me/proton/core/network/domain/ApiResult$Error {
	public fun <init> ()V
	public fun <init> (ZLjava/lang/Throwable;)V
	public synthetic fun <init> (ZLjava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun isConnectedToNetwork ()Z
	public fun isPotentialBlocking ()Z
	public fun toString ()Ljava/lang/String;
}

public class me/proton/core/network/domain/ApiResult$Error$Http : me/proton/core/network/domain/ApiResult$Error {
	public synthetic fun <init> (ILjava/lang/String;Lme/proton/core/network/domain/ApiResult$Error$ProtonData;Ljava/lang/Throwable;Lkotlin/time/Duration;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (ILjava/lang/String;Lme/proton/core/network/domain/ApiResult$Error$ProtonData;Ljava/lang/Throwable;Lkotlin/time/Duration;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getHttpCode ()I
	public final fun getMessage ()Ljava/lang/String;
	public final fun getProton ()Lme/proton/core/network/domain/ApiResult$Error$ProtonData;
	public final fun getRetryAfter-FghU774 ()Lkotlin/time/Duration;
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/ApiResult$Error$NoInternet : me/proton/core/network/domain/ApiResult$Error$Connection {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class me/proton/core/network/domain/ApiResult$Error$Parse : me/proton/core/network/domain/ApiResult$Error {
	public fun <init> (Ljava/lang/Throwable;)V
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/ApiResult$Error$ProtonData {
	public fun <init> (ILjava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Lme/proton/core/network/domain/scopes/MissingScopes;Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;)V
	public synthetic fun <init> (ILjava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Lme/proton/core/network/domain/scopes/MissingScopes;Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;
	public final fun component4 ()Lme/proton/core/network/domain/scopes/MissingScopes;
	public final fun component5 ()Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;
	public final fun copy (ILjava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Lme/proton/core/network/domain/scopes/MissingScopes;Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;)Lme/proton/core/network/domain/ApiResult$Error$ProtonData;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/ApiResult$Error$ProtonData;ILjava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Lme/proton/core/network/domain/scopes/MissingScopes;Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;ILjava/lang/Object;)Lme/proton/core/network/domain/ApiResult$Error$ProtonData;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCode ()I
	public final fun getDeviceVerification ()Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;
	public final fun getError ()Ljava/lang/String;
	public final fun getHumanVerification ()Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;
	public final fun getMissingScopes ()Lme/proton/core/network/domain/scopes/MissingScopes;
	public fun hashCode ()I
	public final fun setDeviceVerification (Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;)V
	public final fun setHumanVerification (Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;)V
	public final fun setMissingScopes (Lme/proton/core/network/domain/scopes/MissingScopes;)V
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/ApiResult$Error$Timeout : me/proton/core/network/domain/ApiResult$Error$Connection {
	public fun <init> (ZLjava/lang/Throwable;)V
	public synthetic fun <init> (ZLjava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class me/proton/core/network/domain/ApiResult$Success : me/proton/core/network/domain/ApiResult {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getValue ()Ljava/lang/Object;
	public fun getValueOrNull ()Ljava/lang/Object;
	public fun isSuccess ()Z
}

public final class me/proton/core/network/domain/ApiResultKt {
	public static final fun doThrow (Lme/proton/core/network/domain/ApiResult$Error;)V
	public static final fun hasProtonErrorCode (Ljava/lang/Throwable;I)Z
	public static final fun hasProtonErrorCode (Lme/proton/core/network/domain/ApiException;I)Z
	public static final fun isForceUpdate (Lme/proton/core/network/domain/ApiException;)Z
	public static final fun isForceUpdate (Lme/proton/core/network/domain/ApiResult;)Z
	public static final fun isPotentialBlocking (Ljava/lang/Throwable;)Z
	public static final fun isRetryable (Lme/proton/core/network/domain/ApiException;)Z
	public static final fun isRetryable (Lme/proton/core/network/domain/ApiResult;)Z
	public static final fun isUnauthorized (Lme/proton/core/network/domain/ApiException;)Z
	public static final fun isUnauthorized (Lme/proton/core/network/domain/ApiResult;)Z
	public static final fun onError (Lme/proton/core/network/domain/ApiResult;Lkotlin/jvm/functions/Function1;)Lme/proton/core/network/domain/ApiResult;
	public static final fun onSuccess (Lme/proton/core/network/domain/ApiResult;Lkotlin/jvm/functions/Function1;)Lme/proton/core/network/domain/ApiResult;
	public static final fun retryAfter (Lme/proton/core/network/domain/ApiException;)Lkotlin/time/Duration;
	public static final fun retryAfter (Lme/proton/core/network/domain/ApiResult;)Lkotlin/time/Duration;
}

public final class me/proton/core/network/domain/CacheOverride {
	public fun <init> ()V
	public final fun getControlHeaderValue ()Ljava/lang/String;
	public final fun getValues ()Ljava/util/List;
	public final fun maxAge (I)Lme/proton/core/network/domain/CacheOverride;
	public final fun maxStale (Ljava/lang/Integer;)Lme/proton/core/network/domain/CacheOverride;
	public static synthetic fun maxStale$default (Lme/proton/core/network/domain/CacheOverride;Ljava/lang/Integer;ILjava/lang/Object;)Lme/proton/core/network/domain/CacheOverride;
	public final fun minFresh (I)Lme/proton/core/network/domain/CacheOverride;
	public final fun noCache ()Lme/proton/core/network/domain/CacheOverride;
	public final fun noStore ()Lme/proton/core/network/domain/CacheOverride;
	public final fun noTransform ()Lme/proton/core/network/domain/CacheOverride;
	public final fun onlyIfCached ()Lme/proton/core/network/domain/CacheOverride;
	public final fun staleIfError (I)Lme/proton/core/network/domain/CacheOverride;
}

public final class me/proton/core/network/domain/DohProvider {
	public static final field Companion Lme/proton/core/network/domain/DohProvider$Companion;
	public fun <init> (Ljava/lang/String;Lme/proton/core/network/domain/ApiClient;Ljava/util/List;Lme/proton/core/network/domain/DohService;Lkotlinx/coroutines/CoroutineScope;Lme/proton/core/network/domain/NetworkPrefs;Lkotlin/jvm/functions/Function0;Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/serverconnection/DohAlternativesListener;)V
	public final fun refreshAlternatives (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/DohProvider$Companion {
	public final fun getLastAlternativesRefresh ()J
	public final fun getMIN_REFRESH_INTERVAL_MS ()J
	public final fun setLastAlternativesRefresh (J)V
}

public abstract interface class me/proton/core/network/domain/DohService {
	public abstract fun getAlternativeBaseUrls (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/HttpResponseCodes {
	public static final field HTTP_BAD_REQUEST I
	public static final field HTTP_CONFLICT I
	public static final field HTTP_FORBIDDEN I
	public static final field HTTP_REQUEST_TIMEOUT I
	public static final field HTTP_SERVICE_UNAVAILABLE I
	public static final field HTTP_TOO_MANY_REQUESTS I
	public static final field HTTP_UNAUTHORIZED I
	public static final field HTTP_UNPROCESSABLE I
	public static final field INSTANCE Lme/proton/core/network/domain/HttpResponseCodes;
}

public final class me/proton/core/network/domain/LogTag {
	public static final field DEFAULT Ljava/lang/String;
	public static final field INSTANCE Lme/proton/core/network/domain/LogTag;
	public static final field INTERCEPTOR Ljava/lang/String;
	public final fun getAPI_ERROR-WnFgrgw ()Ljava/lang/String;
	public final fun getAPI_REQUEST-WnFgrgw ()Ljava/lang/String;
	public final fun getAPI_RESPONSE-WnFgrgw ()Ljava/lang/String;
	public final fun getSERVER_TIME_PARSE_ERROR-WnFgrgw ()Ljava/lang/String;
}

public abstract class me/proton/core/network/domain/NetworkManager {
	public fun <init> ()V
	public abstract fun getNetworkStatus ()Lme/proton/core/network/domain/NetworkStatus;
	public final fun isConnectedToNetwork ()Z
	protected final fun notifyObservers (Lme/proton/core/network/domain/NetworkStatus;)V
	public final fun observe ()Lkotlinx/coroutines/flow/Flow;
	protected abstract fun register ()V
	protected abstract fun unregister ()V
}

public abstract interface class me/proton/core/network/domain/NetworkPrefs {
	public abstract fun getActiveAltBaseUrl ()Ljava/lang/String;
	public abstract fun getAlternativeBaseUrls ()Ljava/util/List;
	public abstract fun getLastPrimaryApiFail ()J
	public abstract fun setActiveAltBaseUrl (Ljava/lang/String;)V
	public abstract fun setAlternativeBaseUrls (Ljava/util/List;)V
	public abstract fun setLastPrimaryApiFail (J)V
}

public final class me/proton/core/network/domain/NetworkStatus : java/lang/Enum {
	public static final field Disconnected Lme/proton/core/network/domain/NetworkStatus;
	public static final field Metered Lme/proton/core/network/domain/NetworkStatus;
	public static final field Unmetered Lme/proton/core/network/domain/NetworkStatus;
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/NetworkStatus;
	public static fun values ()[Lme/proton/core/network/domain/NetworkStatus;
}

public final class me/proton/core/network/domain/ResponseCodes {
	public static final field API_VERSION_INVALID I
	public static final field APP_VERSION_BAD I
	public static final field APP_VERSION_NOT_SUPPORTED_FOR_EXTERNAL_ACCOUNTS I
	public static final field AUTH_SWITCH_TO_SRP I
	public static final field AUTH_SWITCH_TO_SSO I
	public static final field BODY_PARSE_FAILURE I
	public static final field CURRENCY_FORMAT I
	public static final field DEVICE_VERIFICATION_REQUIRED I
	public static final field HUMAN_VERIFICATION_REQUIRED I
	public static final field INSTANCE Lme/proton/core/network/domain/ResponseCodes;
	public static final field INVALID_REQUIREMENTS I
	public static final field INVALID_VALUE I
	public static final field NOT_ALLOWED I
	public static final field NOT_EXISTS I
	public static final field NOT_SAME_AS_FIELD I
	public static final field OK I
	public static final field PASSWORD_WRONG I
	public static final field PAYMENTS_SUBSCRIPTION_NOT_EXISTS I
	public static final field USER_CREATE_NAME_INVALID I
	public static final field USER_CREATE_TOKEN_INVALID I
	public static final field USER_EXISTS_USERNAME_ALREADY_USED I
	public static final field VALUE_OUT_OF_BOUNDS I
	public final fun getFORCE_UPDATE ()Ljava/util/List;
}

public final class me/proton/core/network/domain/TimeoutOverride {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V
	public synthetic fun <init> (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/lang/Integer;
	public final fun copy (Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)Lme/proton/core/network/domain/TimeoutOverride;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/TimeoutOverride;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;ILjava/lang/Object;)Lme/proton/core/network/domain/TimeoutOverride;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getConnectionTimeoutSeconds ()Ljava/lang/Integer;
	public final fun getReadTimeoutSeconds ()Ljava/lang/Integer;
	public final fun getWriteTimeoutSeconds ()Ljava/lang/Integer;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class me/proton/core/network/domain/client/ClientId {
	public static final field Companion Lme/proton/core/network/domain/client/ClientId$Companion;
	public final fun getId ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/client/ClientId$AccountSession : me/proton/core/network/domain/client/ClientId {
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;)V
	public final fun component1 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun copy (Lme/proton/core/network/domain/session/SessionId;)Lme/proton/core/network/domain/client/ClientId$AccountSession;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/client/ClientId$AccountSession;Lme/proton/core/network/domain/session/SessionId;ILjava/lang/Object;)Lme/proton/core/network/domain/client/ClientId$AccountSession;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/client/ClientId$Companion {
	public final fun newClientId (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;)Lme/proton/core/network/domain/client/ClientId;
}

public final class me/proton/core/network/domain/client/ClientId$CookieSession : me/proton/core/network/domain/client/ClientId {
	public fun <init> (Lme/proton/core/network/domain/client/CookieSessionId;)V
	public final fun component1 ()Lme/proton/core/network/domain/client/CookieSessionId;
	public final fun copy (Lme/proton/core/network/domain/client/CookieSessionId;)Lme/proton/core/network/domain/client/ClientId$CookieSession;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/client/ClientId$CookieSession;Lme/proton/core/network/domain/client/CookieSessionId;ILjava/lang/Object;)Lme/proton/core/network/domain/client/ClientId$CookieSession;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getSessionId ()Lme/proton/core/network/domain/client/CookieSessionId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/client/ClientIdKt {
	public static final fun getId (Lme/proton/core/network/domain/client/ClientIdType;Ljava/lang/String;)Lme/proton/core/network/domain/client/ClientId;
	public static final fun getType (Lme/proton/core/network/domain/client/ClientId;)Lme/proton/core/network/domain/client/ClientIdType;
}

public abstract interface class me/proton/core/network/domain/client/ClientIdProvider {
	public abstract fun getClientId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/client/ClientIdType : java/lang/Enum {
	public static final field COOKIE Lme/proton/core/network/domain/client/ClientIdType;
	public static final field Companion Lme/proton/core/network/domain/client/ClientIdType$Companion;
	public static final field SESSION Lme/proton/core/network/domain/client/ClientIdType;
	public final fun getValue ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/client/ClientIdType;
	public static fun values ()[Lme/proton/core/network/domain/client/ClientIdType;
}

public final class me/proton/core/network/domain/client/ClientIdType$Companion {
	public final fun getByValue (Ljava/lang/String;)Lme/proton/core/network/domain/client/ClientIdType;
	public final fun getMap ()Ljava/util/Map;
}

public abstract interface class me/proton/core/network/domain/client/ClientVersionValidator {
	public abstract fun validate (Ljava/lang/String;)Z
}

public final class me/proton/core/network/domain/client/CookieSessionId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/network/domain/client/CookieSessionId;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/client/CookieSessionId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/network/domain/client/CookieSessionId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class me/proton/core/network/domain/client/ExtraHeaderProvider {
	public abstract fun addHeaders ([Lkotlin/Pair;)V
	public abstract fun clear ()V
	public abstract fun getHeaders ()Ljava/util/List;
	public abstract fun removeAll (Ljava/lang/String;)V
	public abstract fun removeFirst (Ljava/lang/String;)V
}

public final class me/proton/core/network/domain/deviceverification/ChallengeType : java/lang/Enum {
	public static final field Argon2 Lme/proton/core/network/domain/deviceverification/ChallengeType;
	public static final field Companion Lme/proton/core/network/domain/deviceverification/ChallengeType$Companion;
	public static final field Ecdlp Lme/proton/core/network/domain/deviceverification/ChallengeType;
	public static final field WASM Lme/proton/core/network/domain/deviceverification/ChallengeType;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/deviceverification/ChallengeType;
	public static fun values ()[Lme/proton/core/network/domain/deviceverification/ChallengeType;
}

public final class me/proton/core/network/domain/deviceverification/ChallengeType$Companion {
	public final fun enumOf (I)Lme/proton/core/domain/type/IntEnum;
	public final fun getMap ()Ljava/util/Map;
}

public abstract interface class me/proton/core/network/domain/deviceverification/DeviceVerificationListener {
	public abstract fun onDeviceVerification (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult {
}

public final class me/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult$Failure : me/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult {
	public static final field INSTANCE Lme/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult$Failure;
}

public final class me/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult$Success : me/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult {
	public static final field INSTANCE Lme/proton/core/network/domain/deviceverification/DeviceVerificationListener$DeviceVerificationResult$Success;
}

public final class me/proton/core/network/domain/deviceverification/DeviceVerificationMethods {
	public fun <init> (Lme/proton/core/domain/type/IntEnum;Ljava/lang/String;)V
	public final fun component1 ()Lme/proton/core/domain/type/IntEnum;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lme/proton/core/domain/type/IntEnum;Ljava/lang/String;)Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;Lme/proton/core/domain/type/IntEnum;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/network/domain/deviceverification/DeviceVerificationMethods;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getChallengePayload ()Ljava/lang/String;
	public final fun getChallengeType ()Lme/proton/core/domain/type/IntEnum;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class me/proton/core/network/domain/deviceverification/DeviceVerificationProvider {
	public abstract fun getSolvedChallenge (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getSolvedChallenge (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun setSolvedChallenge (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/DeviceVerificationNeededHandler : me/proton/core/network/domain/ApiErrorHandler {
	public static final field Companion Lme/proton/core/network/domain/handlers/DeviceVerificationNeededHandler$Companion;
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/session/SessionProvider;Lme/proton/core/network/domain/deviceverification/DeviceVerificationListener;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/DeviceVerificationNeededHandler$Companion {
	public final fun sessionMutex (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/DohApiHandler : me/proton/core/network/domain/ApiErrorHandler {
	public static final field Companion Lme/proton/core/network/domain/handlers/DohApiHandler$Companion;
	public fun <init> (Lme/proton/core/network/domain/ApiClient;Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/DohProvider;Lme/proton/core/network/domain/NetworkPrefs;Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function0;Lme/proton/core/network/domain/serverconnection/DohAlternativesListener;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lme/proton/core/network/domain/ApiClient;Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/DohProvider;Lme/proton/core/network/domain/NetworkPrefs;Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function0;Lme/proton/core/network/domain/serverconnection/DohAlternativesListener;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getActiveAltBackend (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun onBackendBlocked (Lme/proton/core/network/domain/ApiBackend;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/DohApiHandler$Companion {
}

public final class me/proton/core/network/domain/handlers/HumanVerificationInvalidHandler : me/proton/core/network/domain/ApiErrorHandler {
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/client/ClientIdProvider;Lme/proton/core/network/domain/humanverification/HumanVerificationListener;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/HumanVerificationNeededHandler : me/proton/core/network/domain/ApiErrorHandler {
	public static final field Companion Lme/proton/core/network/domain/handlers/HumanVerificationNeededHandler$Companion;
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/client/ClientIdProvider;Lme/proton/core/network/domain/humanverification/HumanVerificationListener;Lkotlin/jvm/functions/Function0;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/HumanVerificationNeededHandler$Companion {
	public final fun clientMutex (Lme/proton/core/network/domain/client/ClientId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun reset (Lme/proton/core/network/domain/client/ClientId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/MissingScopeHandler : me/proton/core/network/domain/ApiErrorHandler {
	public static final field Companion Lme/proton/core/network/domain/handlers/MissingScopeHandler$Companion;
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/session/SessionProvider;Lme/proton/core/network/domain/scopes/MissingScopeListener;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/MissingScopeHandler$Companion {
	public final fun sessionMutex (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/ProtonForceUpdateHandler : me/proton/core/network/domain/ApiErrorHandler {
	public static final field Companion Lme/proton/core/network/domain/handlers/ProtonForceUpdateHandler$Companion;
	public fun <init> (Lme/proton/core/network/domain/ApiClient;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/handlers/ProtonForceUpdateHandler$Companion {
}

public final class me/proton/core/network/domain/handlers/TokenErrorHandler : me/proton/core/network/domain/ApiErrorHandler {
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Lme/proton/core/network/domain/session/SessionProvider;Lme/proton/core/network/domain/session/SessionListener;)V
	public fun invoke (Lme/proton/core/network/domain/ApiBackend;Lme/proton/core/network/domain/ApiResult$Error;Lme/proton/core/network/domain/ApiManager$Call;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods {
	public fun <init> (Ljava/util/List;Ljava/lang/String;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/util/List;Ljava/lang/String;)Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Ljava/util/List;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getVerificationMethods ()Ljava/util/List;
	public final fun getVerificationToken ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/humanverification/HumanVerificationDetails {
	public fun <init> (Lme/proton/core/network/domain/client/ClientId;Ljava/util/List;Ljava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationState;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Lme/proton/core/network/domain/client/ClientId;Ljava/util/List;Ljava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationState;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lme/proton/core/network/domain/client/ClientId;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun copy (Lme/proton/core/network/domain/client/ClientId;Ljava/util/List;Ljava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationState;Ljava/lang/String;Ljava/lang/String;)Lme/proton/core/network/domain/humanverification/HumanVerificationDetails;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/humanverification/HumanVerificationDetails;Lme/proton/core/network/domain/client/ClientId;Ljava/util/List;Ljava/lang/String;Lme/proton/core/network/domain/humanverification/HumanVerificationState;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/network/domain/humanverification/HumanVerificationDetails;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClientId ()Lme/proton/core/network/domain/client/ClientId;
	public final fun getState ()Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public final fun getTokenCode ()Ljava/lang/String;
	public final fun getTokenType ()Ljava/lang/String;
	public final fun getVerificationMethods ()Ljava/util/List;
	public final fun getVerificationToken ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class me/proton/core/network/domain/humanverification/HumanVerificationListener {
	public abstract fun onHumanVerificationInvalid (Lme/proton/core/network/domain/client/ClientId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onHumanVerificationNeeded (Lme/proton/core/network/domain/client/ClientId;Lme/proton/core/network/domain/humanverification/HumanVerificationAvailableMethods;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult {
}

public final class me/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult$Failure : me/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult {
	public static final field INSTANCE Lme/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult$Failure;
}

public final class me/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult$Success : me/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult {
	public static final field INSTANCE Lme/proton/core/network/domain/humanverification/HumanVerificationListener$HumanVerificationResult$Success;
}

public abstract interface class me/proton/core/network/domain/humanverification/HumanVerificationProvider {
	public abstract fun getHumanVerificationDetails (Lme/proton/core/network/domain/client/ClientId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/network/domain/humanverification/HumanVerificationState : java/lang/Enum {
	public static final field HumanVerificationCancelled Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static final field HumanVerificationFailed Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static final field HumanVerificationInvalid Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static final field HumanVerificationNeeded Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static final field HumanVerificationSuccess Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/humanverification/HumanVerificationState;
	public static fun values ()[Lme/proton/core/network/domain/humanverification/HumanVerificationState;
}

public final class me/proton/core/network/domain/humanverification/VerificationMethod {
	public static final field CAPTCHA Ljava/lang/String;
	public static final field COUPON Ljava/lang/String;
	public static final field EMAIL Ljava/lang/String;
	public static final field INSTANCE Lme/proton/core/network/domain/humanverification/VerificationMethod;
	public static final field INVITE Ljava/lang/String;
	public static final field PAYMENT Ljava/lang/String;
	public static final field PHONE Ljava/lang/String;
}

public abstract interface class me/proton/core/network/domain/scopes/MissingScopeListener {
	public abstract fun getState ()Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun onMissingScope (Lme/proton/core/domain/entity/UserId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onMissingScopeFailure (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onMissingScopeSuccess (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/network/domain/scopes/MissingScopeResult {
}

public final class me/proton/core/network/domain/scopes/MissingScopeResult$Failure : me/proton/core/network/domain/scopes/MissingScopeResult {
	public static final field INSTANCE Lme/proton/core/network/domain/scopes/MissingScopeResult$Failure;
}

public final class me/proton/core/network/domain/scopes/MissingScopeResult$Success : me/proton/core/network/domain/scopes/MissingScopeResult {
	public static final field INSTANCE Lme/proton/core/network/domain/scopes/MissingScopeResult$Success;
}

public abstract class me/proton/core/network/domain/scopes/MissingScopeState {
}

public final class me/proton/core/network/domain/scopes/MissingScopeState$ScopeMissing : me/proton/core/network/domain/scopes/MissingScopeState {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Ljava/util/List;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Ljava/util/List;)Lme/proton/core/network/domain/scopes/MissingScopeState$ScopeMissing;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/scopes/MissingScopeState$ScopeMissing;Lme/proton/core/domain/entity/UserId;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/network/domain/scopes/MissingScopeState$ScopeMissing;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMissingScopes ()Ljava/util/List;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/scopes/MissingScopeState$ScopeObtainFailed : me/proton/core/network/domain/scopes/MissingScopeState {
	public static final field INSTANCE Lme/proton/core/network/domain/scopes/MissingScopeState$ScopeObtainFailed;
}

public final class me/proton/core/network/domain/scopes/MissingScopeState$ScopeObtainSuccess : me/proton/core/network/domain/scopes/MissingScopeState {
	public static final field INSTANCE Lme/proton/core/network/domain/scopes/MissingScopeState$ScopeObtainSuccess;
}

public final class me/proton/core/network/domain/scopes/MissingScopes {
	public fun <init> ()V
	public fun <init> (Ljava/util/List;)V
	public synthetic fun <init> (Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/util/List;
	public final fun copy (Ljava/util/List;)Lme/proton/core/network/domain/scopes/MissingScopes;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/scopes/MissingScopes;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/network/domain/scopes/MissingScopes;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getScopes ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/scopes/Scope : java/lang/Enum {
	public static final field Companion Lme/proton/core/network/domain/scopes/Scope$Companion;
	public static final field LOCKED Lme/proton/core/network/domain/scopes/Scope;
	public static final field PASSWORD Lme/proton/core/network/domain/scopes/Scope;
	public final fun getValue ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/network/domain/scopes/Scope;
	public static fun values ()[Lme/proton/core/network/domain/scopes/Scope;
}

public final class me/proton/core/network/domain/scopes/Scope$Companion {
	public final fun getByValue (Ljava/lang/String;)Lme/proton/core/network/domain/scopes/Scope;
	public final fun getMap ()Ljava/util/Map;
}

public abstract interface class me/proton/core/network/domain/server/ServerTimeListener {
	public abstract fun onServerTimeUpdated (J)V
}

public abstract interface class me/proton/core/network/domain/serverconnection/DohAlternativesListener {
	public abstract fun onAlternativesUnblock (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onProxiesFailed (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class me/proton/core/network/domain/session/Session {
	public synthetic fun <init> (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getAccessToken ()Ljava/lang/String;
	public fun getRefreshToken ()Ljava/lang/String;
	public fun getScopes ()Ljava/util/List;
	public fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun isValid ()Z
}

public final class me/proton/core/network/domain/session/Session$Authenticated : me/proton/core/network/domain/session/Session {
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/Session;)V
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Lme/proton/core/network/domain/session/Session$Authenticated;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/session/Session$Authenticated;Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/network/domain/session/Session$Authenticated;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAccessToken ()Ljava/lang/String;
	public fun getRefreshToken ()Ljava/lang/String;
	public fun getScopes ()Ljava/util/List;
	public fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/session/Session$Unauthenticated : me/proton/core/network/domain/session/Session {
	public fun <init> (Lme/proton/core/network/domain/session/Session;)V
	public fun <init> (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
	public final fun component1 ()Lme/proton/core/network/domain/session/SessionId;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/util/List;
	public final fun copy (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Lme/proton/core/network/domain/session/Session$Unauthenticated;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/session/Session$Unauthenticated;Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;ILjava/lang/Object;)Lme/proton/core/network/domain/session/Session$Unauthenticated;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAccessToken ()Ljava/lang/String;
	public fun getRefreshToken ()Ljava/lang/String;
	public fun getScopes ()Ljava/util/List;
	public fun getSessionId ()Lme/proton/core/network/domain/session/SessionId;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/session/SessionId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/network/domain/session/SessionId;
	public static synthetic fun copy$default (Lme/proton/core/network/domain/session/SessionId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/network/domain/session/SessionId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/network/domain/session/SessionKt {
	public static final fun toStringLog (Lme/proton/core/network/domain/session/Session;)Ljava/lang/String;
}

public abstract interface class me/proton/core/network/domain/session/SessionListener {
	public abstract fun onSessionForceLogout (Lme/proton/core/network/domain/session/Session;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onSessionScopesRefreshed (Lme/proton/core/network/domain/session/SessionId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onSessionTokenCreated (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun onSessionTokenRefreshed (Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun refreshSession (Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun requestSession (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun withLock (Lme/proton/core/network/domain/session/SessionId;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/network/domain/session/SessionProvider {
	public abstract fun getSession (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getSessionId (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getSessions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getUserId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

