public class hilt_aggregated_deps/_me_proton_core_accountmanager_data_RefreshUserWorker_HiltModule {
	public fun <init> ()V
}

public final class me/proton/core/accountmanager/data/AccountManagerImpl : me/proton/core/accountmanager/domain/AccountManager, me/proton/core/auth/domain/AccountWorkflowHandler {
	public fun <init> (Lme/proton/core/domain/entity/Product;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/auth/domain/repository/AuthRepository;Lme/proton/core/user/domain/UserManager;Lme/proton/core/network/domain/session/SessionListener;)V
	public fun addAccount (Lme/proton/core/account/domain/entity/Account;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun disableAccount (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getAccount (Lme/proton/core/domain/entity/UserId;)Lkotlinx/coroutines/flow/Flow;
	public fun getAccounts ()Lkotlinx/coroutines/flow/Flow;
	public fun getPreviousPrimaryUserId (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getPrimaryUserId ()Lkotlinx/coroutines/flow/Flow;
	public fun getSessions ()Lkotlinx/coroutines/flow/Flow;
	public fun handleAccountDisabled (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleAccountNotReady (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleAccountReady (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleCreateAddressFailed (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleCreateAddressNeeded (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleCreateAddressSuccess (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleSecondFactorFailed (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleSecondFactorSuccess (Lme/proton/core/network/domain/session/SessionId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleSession (Lme/proton/core/account/domain/entity/Account;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleTwoPassModeFailed (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleTwoPassModeNeeded (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleTwoPassModeSuccess (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnlockFailed (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun onAccountStateChanged (Z)Lkotlinx/coroutines/flow/Flow;
	public fun onSessionStateChanged (Z)Lkotlinx/coroutines/flow/Flow;
	public fun removeAccount (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun setAsPrimary (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/AccountManagerImpl_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/AccountManagerImpl_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/AccountManagerImpl;
	public static fun newInstance (Lme/proton/core/domain/entity/Product;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/auth/domain/repository/AuthRepository;Lme/proton/core/user/domain/UserManager;Lme/proton/core/network/domain/session/SessionListener;)Lme/proton/core/accountmanager/data/AccountManagerImpl;
}

public final class me/proton/core/accountmanager/data/AccountMigratorImpl : me/proton/core/accountmanager/domain/migrator/AccountMigrator {
	public fun <init> (Lme/proton/core/accountmanager/domain/AccountManager;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/user/domain/repository/UserRepository;Lme/proton/core/accountmanager/data/RefreshUserWorkManager;)V
	public fun migrate (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/AccountMigratorImpl_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/AccountMigratorImpl_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/AccountMigratorImpl;
	public static fun newInstance (Lme/proton/core/accountmanager/domain/AccountManager;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/user/domain/repository/UserRepository;Lme/proton/core/accountmanager/data/RefreshUserWorkManager;)Lme/proton/core/accountmanager/data/AccountMigratorImpl;
}

public final class me/proton/core/accountmanager/data/AccountStateHandler {
	public fun <init> (Lme/proton/core/util/kotlin/CoroutineScopeProvider;Lme/proton/core/user/domain/UserManager;Lme/proton/core/accountmanager/domain/AccountManager;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/accountmanager/domain/migrator/AccountMigrator;Lme/proton/core/notification/presentation/NotificationSetup;Lme/proton/core/accountrecovery/presentation/compose/AccountRecoveryNotificationSetup;Lme/proton/core/domain/entity/Product;)V
	public final fun start ()V
}

public final class me/proton/core/accountmanager/data/AccountStateHandler_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/AccountStateHandler_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/AccountStateHandler;
	public static fun newInstance (Lme/proton/core/util/kotlin/CoroutineScopeProvider;Lme/proton/core/user/domain/UserManager;Lme/proton/core/accountmanager/domain/AccountManager;Lme/proton/core/account/domain/repository/AccountRepository;Lme/proton/core/accountmanager/domain/migrator/AccountMigrator;Lme/proton/core/notification/presentation/NotificationSetup;Lme/proton/core/accountrecovery/presentation/compose/AccountRecoveryNotificationSetup;Lme/proton/core/domain/entity/Product;)Lme/proton/core/accountmanager/data/AccountStateHandler;
}

public final class me/proton/core/accountmanager/data/BuildConfig {
	public static final field BUILD_TYPE Ljava/lang/String;
	public static final field DEBUG Z
	public static final field LIBRARY_PACKAGE_NAME Ljava/lang/String;
	public fun <init> ()V
}

public final class me/proton/core/accountmanager/data/RefreshUserWorkManager {
	public fun <init> (Landroidx/work/WorkManager;)V
	public final fun enqueue (Lme/proton/core/domain/entity/UserId;)V
}

public final class me/proton/core/accountmanager/data/RefreshUserWorkManager_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/RefreshUserWorkManager_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/RefreshUserWorkManager;
	public static fun newInstance (Landroidx/work/WorkManager;)Lme/proton/core/accountmanager/data/RefreshUserWorkManager;
}

public abstract interface class me/proton/core/accountmanager/data/RefreshUserWorker_AssistedFactory : androidx/hilt/work/WorkerAssistedFactory {
}

public final class me/proton/core/accountmanager/data/RefreshUserWorker_AssistedFactory_Impl : me/proton/core/accountmanager/data/RefreshUserWorker_AssistedFactory {
	public synthetic fun create (Landroid/content/Context;Landroidx/work/WorkerParameters;)Landroidx/work/ListenableWorker;
	public fun create (Landroid/content/Context;Landroidx/work/WorkerParameters;)Lme/proton/core/accountmanager/data/RefreshUserWorker;
	public static fun create (Lme/proton/core/accountmanager/data/RefreshUserWorker_Factory;)Ljavax/inject/Provider;
}

public final class me/proton/core/accountmanager/data/RefreshUserWorker_Factory {
	public fun <init> (Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/RefreshUserWorker_Factory;
	public fun get (Landroid/content/Context;Landroidx/work/WorkerParameters;)Lme/proton/core/accountmanager/data/RefreshUserWorker;
	public static fun newInstance (Landroid/content/Context;Landroidx/work/WorkerParameters;Lme/proton/core/user/domain/repository/UserRepository;)Lme/proton/core/accountmanager/data/RefreshUserWorker;
}

public abstract interface class me/proton/core/accountmanager/data/RefreshUserWorker_HiltModule {
	public abstract fun bind (Lme/proton/core/accountmanager/data/RefreshUserWorker_AssistedFactory;)Landroidx/hilt/work/WorkerAssistedFactory;
}

public class me/proton/core/accountmanager/data/SessionListenerImpl : me/proton/core/network/domain/session/SessionListener {
	public fun <init> (Ldagger/Lazy;)V
	public fun onSessionForceLogout (Lme/proton/core/network/domain/session/Session;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun onSessionScopesRefreshed (Lme/proton/core/network/domain/session/SessionId;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun onSessionTokenCreated (Lme/proton/core/domain/entity/UserId;Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun onSessionTokenRefreshed (Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun refreshSession (Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestSession (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun withLock (Lme/proton/core/network/domain/session/SessionId;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/SessionListenerImpl_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/SessionListenerImpl_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/SessionListenerImpl;
	public static fun newInstance (Ldagger/Lazy;)Lme/proton/core/accountmanager/data/SessionListenerImpl;
}

public final class me/proton/core/accountmanager/data/SessionManagerImpl : me/proton/core/accountmanager/domain/SessionManager, me/proton/core/network/domain/session/SessionProvider {
	public static final field Companion Lme/proton/core/accountmanager/data/SessionManagerImpl$Companion;
	public fun <init> (Lme/proton/core/network/domain/session/SessionListener;Lme/proton/core/network/domain/session/SessionProvider;Lme/proton/core/auth/domain/repository/AuthRepository;Lme/proton/core/account/domain/repository/AccountRepository;Lkotlin/jvm/functions/Function0;)V
	public fun getSession (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessionId (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getUserId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun refreshScopes (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun refreshSession (Lme/proton/core/network/domain/session/Session;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestSession (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun withLock (Lme/proton/core/network/domain/session/SessionId;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/SessionManagerImpl$Companion {
	public final fun clear ()V
	public final fun getFORCE_LOGOUT_HTTP_CODES ()Ljava/util/List;
	public final fun reset (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun sessionMutex (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/SessionManagerImpl_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/SessionManagerImpl_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/SessionManagerImpl;
	public static fun newInstance (Lme/proton/core/network/domain/session/SessionListener;Lme/proton/core/network/domain/session/SessionProvider;Lme/proton/core/auth/domain/repository/AuthRepository;Lme/proton/core/account/domain/repository/AccountRepository;Lkotlin/jvm/functions/Function0;)Lme/proton/core/accountmanager/data/SessionManagerImpl;
}

public final class me/proton/core/accountmanager/data/SessionProviderImpl : me/proton/core/network/domain/session/SessionProvider {
	public fun <init> (Lme/proton/core/account/domain/repository/AccountRepository;)V
	public fun getSession (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessionId (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getSessions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getUserId (Lme/proton/core/network/domain/session/SessionId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/accountmanager/data/SessionProviderImpl_Factory : dagger/internal/Factory {
	public fun <init> (Ljavax/inject/Provider;)V
	public static fun create (Ljavax/inject/Provider;)Lme/proton/core/accountmanager/data/SessionProviderImpl_Factory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/accountmanager/data/SessionProviderImpl;
	public static fun newInstance (Lme/proton/core/account/domain/repository/AccountRepository;)Lme/proton/core/accountmanager/data/SessionProviderImpl;
}

public final class me/proton/core/accountmanager/data/job/DisableNotReadyAccountKt {
	public static final fun disableInitialNotReadyAccounts (Lme/proton/core/accountmanager/data/AccountStateHandler;)Lkotlinx/coroutines/Job;
}

public final class me/proton/core/accountmanager/data/job/OnInvalidKeyKt {
	public static final fun onInvalidUserAddressKey (Lme/proton/core/accountmanager/data/AccountStateHandler;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static final fun onInvalidUserKey (Lme/proton/core/accountmanager/data/AccountStateHandler;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public final class me/proton/core/accountmanager/data/job/OnMigrationNeededKt {
	public static final fun onMigrationNeeded (Lme/proton/core/accountmanager/data/AccountStateHandler;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

