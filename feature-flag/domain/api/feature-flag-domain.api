public abstract interface annotation class me/proton/core/featureflag/domain/ExperimentalProtonFeatureFlag : java/lang/annotation/Annotation {
}

public abstract interface class me/proton/core/featureflag/domain/FeatureFlagManager {
	public abstract fun awaitNotEmptyScope (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun get (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getFreshValue (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getOrDefault (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/FeatureFlag;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getValue (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;)Z
	public abstract fun observe (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observeOrDefault (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/FeatureFlag;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun prefetch (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;)V
	public abstract fun refreshAll (Lme/proton/core/domain/entity/UserId;)V
	public abstract fun update (Lme/proton/core/featureflag/domain/entity/FeatureFlag;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/featureflag/domain/FeatureFlagManager$DefaultImpls {
	public static synthetic fun awaitNotEmptyScope$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun get$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getFreshValue$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getOrDefault$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/FeatureFlag;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getValue$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ILjava/lang/Object;)Z
	public static synthetic fun observe$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observeOrDefault$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/FeatureFlag;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun refreshAll$default (Lme/proton/core/featureflag/domain/FeatureFlagManager;Lme/proton/core/domain/entity/UserId;ILjava/lang/Object;)V
}

public abstract interface class me/proton/core/featureflag/domain/IsFeatureFlagEnabled {
	public abstract fun invoke (Lme/proton/core/domain/entity/UserId;)Z
	public abstract fun isLocalEnabled ()Z
	public abstract fun isRemoteEnabled (Lme/proton/core/domain/entity/UserId;)Z
}

public final class me/proton/core/featureflag/domain/LogTag {
	public static final field FEATURE_FLAG_NOT_FOUND Ljava/lang/String;
	public static final field INSTANCE Lme/proton/core/featureflag/domain/LogTag;
}

public final class me/proton/core/featureflag/domain/entity/FeatureFlag {
	public static final field Companion Lme/proton/core/featureflag/domain/entity/FeatureFlag$Companion;
	public fun <init> (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/Scope;ZZ)V
	public final fun component1 ()Lme/proton/core/domain/entity/UserId;
	public final fun component2 ()Lme/proton/core/featureflag/domain/entity/FeatureId;
	public final fun component3 ()Lme/proton/core/featureflag/domain/entity/Scope;
	public final fun component4 ()Z
	public final fun component5 ()Z
	public final fun copy (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/Scope;ZZ)Lme/proton/core/featureflag/domain/entity/FeatureFlag;
	public static synthetic fun copy$default (Lme/proton/core/featureflag/domain/entity/FeatureFlag;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Lme/proton/core/featureflag/domain/entity/Scope;ZZILjava/lang/Object;)Lme/proton/core/featureflag/domain/entity/FeatureFlag;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDefaultValue ()Z
	public final fun getFeatureId ()Lme/proton/core/featureflag/domain/entity/FeatureId;
	public final fun getScope ()Lme/proton/core/featureflag/domain/entity/Scope;
	public final fun getUserId ()Lme/proton/core/domain/entity/UserId;
	public final fun getValue ()Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/featureflag/domain/entity/FeatureFlag$Companion {
	public final fun default (Ljava/lang/String;Z)Lme/proton/core/featureflag/domain/entity/FeatureFlag;
}

public final class me/proton/core/featureflag/domain/entity/FeatureId {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lme/proton/core/featureflag/domain/entity/FeatureId;
	public static synthetic fun copy$default (Lme/proton/core/featureflag/domain/entity/FeatureId;Ljava/lang/String;ILjava/lang/Object;)Lme/proton/core/featureflag/domain/entity/FeatureId;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class me/proton/core/featureflag/domain/entity/Scope : java/lang/Enum {
	public static final field Global Lme/proton/core/featureflag/domain/entity/Scope;
	public static final field Local Lme/proton/core/featureflag/domain/entity/Scope;
	public static final field Unknown Lme/proton/core/featureflag/domain/entity/Scope;
	public static final field Unleash Lme/proton/core/featureflag/domain/entity/Scope;
	public static final field User Lme/proton/core/featureflag/domain/entity/Scope;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lme/proton/core/featureflag/domain/entity/Scope;
	public static fun values ()[Lme/proton/core/featureflag/domain/entity/Scope;
}

public abstract interface class me/proton/core/featureflag/domain/repository/FeatureFlagLocalDataSource {
	public abstract fun getAll (Lme/proton/core/featureflag/domain/entity/Scope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun observe (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observe (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun replaceAll (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun updateValue (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun upsert (Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/featureflag/domain/repository/FeatureFlagRemoteDataSource {
	public abstract fun get (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAll (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun prefetch (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;)V
	public abstract fun update (Lme/proton/core/featureflag/domain/entity/FeatureFlag;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class me/proton/core/featureflag/domain/repository/FeatureFlagRepository {
	public abstract fun awaitNotEmptyScope (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun get (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun get (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getAll (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getValue (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;)Ljava/lang/Boolean;
	public abstract fun observe (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun observe (Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;Z)Lkotlinx/coroutines/flow/Flow;
	public abstract fun prefetch (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;)V
	public abstract fun refreshAllOneTime (Lme/proton/core/domain/entity/UserId;)V
	public abstract fun refreshAllPeriodic (Lme/proton/core/domain/entity/UserId;Z)V
	public abstract fun update (Lme/proton/core/featureflag/domain/entity/FeatureFlag;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/featureflag/domain/repository/FeatureFlagRepository$DefaultImpls {
	public static synthetic fun awaitNotEmptyScope$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/Scope;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun get$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Ljava/util/Set;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun get$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getAll$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun getValue$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ILjava/lang/Object;)Ljava/lang/Boolean;
	public static synthetic fun observe$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Ljava/util/Set;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun observe$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;Lme/proton/core/featureflag/domain/entity/FeatureId;ZILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun refreshAllOneTime$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;ILjava/lang/Object;)V
	public static synthetic fun refreshAllPeriodic$default (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;Lme/proton/core/domain/entity/UserId;ZILjava/lang/Object;)V
}

public final class me/proton/core/featureflag/domain/usecase/FetchFeatureIdsRemote {
	public fun <init> (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;)V
	public final fun invoke (Lme/proton/core/domain/entity/UserId;Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class me/proton/core/featureflag/domain/usecase/FetchUnleashTogglesRemote {
	public fun <init> (Lme/proton/core/featureflag/domain/repository/FeatureFlagRepository;)V
	public final fun invoke (Lme/proton/core/domain/entity/UserId;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

